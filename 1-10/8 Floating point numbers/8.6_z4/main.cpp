/*
Задание 8.6.4. Убийца Steam

Вы пишете программу-инсталлятор для компьютерной игры. Пока обновление скачивается,
пользователю нужно показать прогресс загрузки, чтобы он мог решить, подождать ему у 
экрана компьютера или заварить чай.

Напишите программу, принимающую на вход размер файла обновления в мегабайтах и скорость 
интернет-соединения в мегабайтах в секунду. В каждую секунду программа показывает, 
сколько процентов от общего объёма обновления уже скачано, до тех пор, пока файл не 
загрузится. После установки обновления программа выводит время в секундах, которое 
заняло скачивание. Обеспечьте контроль ввода.

Пример выполнения   Ввод:
                    Укажите размер файла для скачивания: 123
                    Какова скорость вашего соединения? 27
                    Вывод:
                    Прошло 1 сек. Скачано 27 из 123 МБ (21%).
                    Прошло 2 сек. Скачано 54 из 123 МБ (43%).
                    Прошло 3 сек. Скачано 81 из 123 МБ (65%).
                    Прошло 4 сек. Скачано 108 из 123 МБ (87%).
                    Прошло 5 сек. Скачано 123 из 123 МБ (100%).

Рекомендации по выполнению
Обратите внимание, что проценты это целые числа.

Что оценивается
Программа работает корректно с любыми заданными значениями.
Количество процентов не вводит в заблуждение пользователя. Например, не должно выводиться
100%, если файл ещё не загрузился.
*/

#include <iostream>
#include<cmath>
// Проверка ввода строки и пустого ввода
std::string InputTxt(std::string inTxt){
  std::string result = "";
   do{
    std::cout << inTxt;
    getline(std::cin, result);
    if (result == ""){
      std::cout << "Вы забыли ввести значение! Попробуйте снова." << std::endl;
    } 
  } while(result == ""); 
  return result;
}

// Является ли числом
bool IsDigit(std::string inTxt){  
  int ind = 0;
  
  for (int i = 0; i < inTxt.length(); i++){
    if (i == 0 && inTxt[0] == '-' || inTxt[i] == '.'){
      ind++;
    } else if (int(inTxt[i]) >= 48 && int(inTxt[i] <= 57)){
      ind++;
    }  else {
      ind--;
    }
  }     
  
  if (ind == inTxt.length()){
    return true;
  }  
  return false;
}

// Проверка ввода числа и вывод его (float)
float ValidNumFloat(std::string request){
  float result = 0.0f;
  std::string numTxt = "";
  bool err = true;

  do {
    numTxt = InputTxt(request);
    if (IsDigit(numTxt)){
      result = std::stof(numTxt);
      if (result <= 0) {
        std::cout << "Введите значение больше нуля!" << std::endl;
      } else { 
        err = false;
      }
    } else {
      std::cout << "Вы не ввели число! Попробуйте снова." << std::endl;
    }  
  } while (err);
  
  return (float) result;
}

int main() {
  std::cout << "Программа-инсталлятор для компьютерной игры." << std::endl;
  float volume = ValidNumFloat("Укажите объём скачиваемого файла  (МБ)  : ");
  float speed = ValidNumFloat("Введите скорость передачи по сети (МБ/с): ");
  std::cout << "--------------------------------------------------" << std::endl;
  int time = 1, percent = 0;
  float share = 0.0f;

  while (percent != 100) {
    share += speed; 
    if (share < volume){      
      percent = std::floor(share * 100 / volume);
      std::cout << "Прошло " << time << " сек. Скачано " << share << " из " << 
        volume << " МБ (" <<  percent << "%)." << std::endl;
      time ++;
    } else {
      share = volume;
      percent = 100;
      std::cout << "Прошло " << time << " сек. Скачано " << share << " из " << 
        volume << " МБ (" <<  percent << "%)." << std::endl;
    }    
  }

  return 0;
}