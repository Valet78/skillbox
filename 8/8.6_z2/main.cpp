/*
Задание 8.6.2. Immolate Improved!

Мы придумываем фэнтезийную онлайн-игру в жанре RPG. В орка стреляют огненными шарами разной степени
мощности, но у него есть очки здоровья и показатель сопротивляемости магии. Очки здоровья, 
сопротивляемость магии и мощность огненного шара — это вещественные числа от нуля до единицы 
включительно. Чем больше мощность, тем больше урон здоровью, но чем больше сопротивляемость магии, 
тем урон меньше. Например, если сопротивляемость равна нулю (0%), то будет нанесён урон, равный 
мощности огненного шара. Если сопротивляемость равна единице (100%), урон будет равен нулю, даже 
если мощность заклинания максимальна.

Напишите программу, в которой пользователь сначала задаёт количество здоровья и сопротивляемость 
магии орка, а после стреляет в него огненными шарами разной мощности, пока орк не погибнет. 
Мощность удара вводится с клавиатуры с каждым выстрелом. После каждого заклинания программа выводит 
на экран итоговый урон от удара и оставшиеся очки здоровья орка. Показатель сопротивляемости магии 
не изменяется при попадании. Обеспечьте контроль ввода.

Обратите внимание, что сопротивляемость обозначает только долю от повреждения, которая приходится 
на орка. Мощность удара считается с учётом сопротивляемости.
Пример:   Урон 0.1, сопротивляемость 0.5, по орку будет нанесено 0.05 урона;
          Урон 0.2, сопротивляемость 0.5, по орку будет нанесено 0.1 урона;
          Урон 1, сопротивляемость 0.2, по орку будет нанесено 0.8 урона.

Рекомендации по выполнению
Для решения использовать цикл while.

Что оценивается
Все величины должны измеряться в одной шкале — от 0 до 1.
*/


#include <iostream>

// Проверка ввода строки и пустого ввода
std::string InputTxt(std::string inTxt){
  std::string result = "";
   do{
    std::cout << inTxt;
    getline(std::cin, result);
    if (result == ""){
      std::cout << "Вы забыли ввести значение! Попробуйте снова." << std::endl;
    } 
  } while(result == ""); 
  return result;
}

// Является ли числом
bool IsDigit(std::string inTxt){  
  int ind = 0;
  
  for (int i = 0; i < inTxt.length(); i++){
    if (i == 0 && inTxt[0] == '-' || inTxt[i] == '.'){
      ind++;
    } else if (int(inTxt[i]) >= 48 && int(inTxt[i] <= 57)){
      ind++;
    }  else {
      ind--;
    }
  }     
  
  if (ind == inTxt.length()){
    return true;
  }  
  return false;
}

// Проверка ввода числа и вывод его (float)
float ValidNumFloat(std::string request){
  float result = 0.0f;
  std::string numTxt = "";
  bool err = true;

  do {
    numTxt = InputTxt(request);
    if (IsDigit(numTxt)){
      result = std::stof(numTxt);
      if (result < 0 || result > 1) {
        std::cout << "Введите число в диапазоне [0..1.0]!" << std::endl;
      } else { 
        err = false;
      }
    } else {
      std::cout << "Вы не ввели число! Попробуйте снова." << std::endl;
    }  
  } while (err);
  
  return (float) result;
}

int main() {
  std::cout << "Программа расчёта нанесённого Орку урона." << std::endl;
  float health = ValidNumFloat("Введите количество здоровья персонажа: ");
  float resistance = ValidNumFloat("Укажите значение сопротивления магии: ");
  std::cout << "А, сейчас немного постреляем в Орка." << std::endl;
  std::cout << "-----------------------------------------------" << std::endl;  
  float fireball = 0.0f, damage = 0.0f;

  do {
    fireball = ValidNumFloat("Укажите мощность огненного шара: ");
    damage = fireball * resistance;
    health -= damage;
    if (health > 0) {
      std::cout << "Нанесён урон " << damage << ", у орка осталось "<< health 
                << " единиц здоровья." << std::endl;
    } else {
      std::cout << "Нанесён урон " << damage << ". Орк погиб!" << std::endl;
      health = 0;
    }
  } while (health != 0);
  
  return 0;
}